generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  favorites     UsersOnComplexes[]
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Complex {
  id        String   @id @default(cuid())
  title     String
  metaTitle String?
  slug      String?  @unique
  location  String?
  street    String?
  postal    String?
  description   String?
  metaDescription String?
  link      String
  availabilityLink  String?
  rating    String?
  rateCount Int?
  placeId   String?
  coordinates Float[]
  image     String?
  communityMap String?
  amenities String[]
  amenitiesImgs String[]
  apartmentAmenities String[]
  apartmentAmenitiesImgs String[]
  neighborhood String[]
  neighborhoodImgs String[]
  roofDeck      Boolean @default(false)
  bbq           Boolean @default(false)
  gym           Boolean @default(false)
  pool          Boolean @default(false)
  workSpaces    Boolean @default(false)
  gameRoom      Boolean @default(false)
  packing       Boolean @default(false)
  bikeStorage   Boolean @default(false)
  petFriendly   Boolean @default(false)
  garage        Boolean @default(false)
  evCharging    Boolean @default(false)
  hardFloors    Boolean @default(false)
  inUnitWasher  Boolean @default(false)
  bigWindows    Boolean @default(false)
  airCondition  Boolean @default(false)
  balconies     Boolean @default(false)
  modernStyle   Boolean @default(false)
  furnishedOpt  Boolean @default(false)
  walkInCloset  Boolean @default(false)
  storage       Boolean @default(false)
  inclEnergies  Boolean @default(false)
  floorHeating  Boolean @default(false)
  show          Boolean @default(true)
  favUsers  UsersOnComplexes[]
  apartments    Apartment[]
  apartmentsAll    ApartmentRaw[]
  }

  model Apartment {
    id        String   @id @default(cuid())
    complexId String  @map("complex_id")
    beds      String?
    baths     String?
    area      String?
    price     String?
    image     String?
    link      String?
    createdAt  DateTime   @default(now())
    complex Complex @relation(fields:[complexId], references:[id], onDelete: Cascade)
  }

   model ApartmentRaw {
    id        String   @id @default(cuid())
    complexId String  @map("complex_id")
    beds      String?
    baths     String?
    area      String?
    price     String?
    image     String?
    link      String?
    complex Complex @relation(fields:[complexId], references:[id], onDelete: Cascade)
    createdAt  DateTime   @default(now())
  }

model UsersOnComplexes {
  complex       Complex @relation(fields: [complexId], references: [id])
  complexId     String
  user          User @relation(fields: [userId], references: [id])
  userId        String
  assignedAt DateTime @default(now())

  @@id([complexId, userId])
}